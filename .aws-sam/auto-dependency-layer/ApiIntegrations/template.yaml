AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'multi-modal-rag-notes-api

  '
Globals:
  Function:
    Timeout: 180
    MemorySize: 2048
    Runtime: python3.11
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: notes_ai_api_service
        POWERTOOLS_METRICS_NAMESPACE: notes_ai_api
Parameters:
  DocumentTable:
    Type: String
    Description: Documents Table
  UserTable:
    Type: String
    Description: Users Table
  UserNotesTable:
    Type: String
    Description: User Notes Table
Resources:
  GenerateEmbeddingsFromTextFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GenerateEmbeddingsFromTextFunction
      Handler: generate_embeddings_text.lambda_handler
      Timeout: 180
      MemorySize: 2048
      Runtime: python3.11
      Policies:
      - S3CrudPolicy:
          BucketName: multi-modal-rag-notes-api-apiintegrations
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DocumentTable
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dev/pinecone-secret-GTZ20L
      - Statement:
        - Sid: BedrockScopedAccess
          Effect: Allow
          Action: bedrock:InvokeModel
          Resource:
          - arn:aws:bedrock:*::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
          - arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1
      Environment:
        Variables:
          DOCS_TABLE:
            Ref: DocumentTable
          BUCKET:
            Ref: DocumentBucket
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ApiIntegrationsGenerateEmbeddingsFromTextFunctioadd5bd27DepLayer
    Metadata:
      SamResourceId: GenerateEmbeddingsFromTextFunction
  TranscribeMediaWorkflowSfn:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../../api-integrations/statemachine/workflow.asl.json
      DefinitionSubstitutions:
        BucketName:
          Ref: DocumentBucket
        GenerateEmbeddingsLambdaArn:
          Fn::GetAtt:
          - GenerateEmbeddingsFromTextFunction
          - Arn
      Role:
        Fn::GetAtt:
        - TranscribeStateMachineRole
        - Arn
  TranscribeStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: TranscribePermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - transcribe:StartTranscriptionJob
            - transcribe:GetTranscriptionJob
            - transcribe:ListTranscriptionJobs
            Resource: '*'
      - PolicyName: LambdaInvokePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - GenerateEmbeddingsFromTextFunction
              - Arn
      - PolicyName: S3CrudPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
            Resource:
            - Fn::Sub: arn:aws:s3:::${DocumentBucket}
            - Fn::Sub: arn:aws:s3:::${DocumentBucket}/*
  NoteLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
    - LambdaLoggingPolicy
    Properties:
      CodeUri: NoteLambdaFunction
      Handler: app.lambda_handler
      Description: note Lambda Direct Lambda Resolver
      Environment:
        Variables:
          DOCS_TABLE:
            Ref: DocumentTable
          USER_TABLE:
            Ref: UserTable
          USER_NOTES_TABLE:
            Ref: UserNotesTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserNotesTable
      - S3CrudPolicy:
          BucketName: multi-modal-rag-notes-api-apiintegrations
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dev/pinecone-secret-GTZ20L
      - Statement:
        - Sid: BedrockScopedAccess
          Effect: Allow
          Action: bedrock:InvokeModel
          Resource:
          - arn:aws:bedrock:*::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
          - arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1
      Tags:
        SOLUTION: LambdaPowertoolsPython
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ApiIntegrationsNoteLambdaFunction67402975DepLayer
    Metadata:
      SamResourceId: NoteLambdaFunction
  LambdaLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaXRayPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
      Roles:
      - Ref: AddLambdaRole
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
  AddLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
  InvokeLambdaResolverPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DirectAppSyncLambda
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: lambda:invokeFunction
          Resource:
          - Fn::GetAtt:
            - NoteLambdaFunction
            - Arn
      Roles:
      - Ref: AppSyncServiceRole
      - Ref: AddLambdaRole
  SQSDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
  SQSQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      VisibilityTimeout: 180
      MessageRetentionPeriod: 3600
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - SQSDeadLetterQueue
          - Arn
        maxReceiveCount: 5
  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: SQSQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: SecureTransportPolicy
        Statement:
        - Sid: AllowSecureTransportOnly
          Effect: Deny
          Principal: '*'
          Action: SQS:*
          Resource: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
  UploadTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UploadTriggerFunction
      Handler: main.lambda_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DocumentTable
      - S3ReadPolicy:
          BucketName: multi-modal-rag-notes-api-apiintegrations
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - SQSQueue
            - QueueName
      Environment:
        Variables:
          DOCS_TABLE:
            Ref: DocumentTable
          QUEUE:
            Fn::GetAtt:
            - SQSQueue
            - QueueName
          BUCKET: multi-modal-rag-notes-api-apiintegrations
      Events:
        S3PdfUploadEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: DocumentBucket
            Events:
            - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .pdf
        S3AudioUploadEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: DocumentBucket
            Events:
            - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .mp3
        S3VideoUploadEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: DocumentBucket
            Events:
            - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .mp4
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ApiIntegrationsUploadTriggerFunction6d34523aDepLayer
    Metadata:
      SamResourceId: UploadTriggerFunction
  GenerateEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GenerateEmbeddingsFunction
      Handler: main.lambda_handler
      Timeout: 180
      MemorySize: 2048
      Policies:
      - SQSPollerPolicy:
          QueueName:
            Fn::GetAtt:
            - SQSQueue
            - QueueName
      - S3CrudPolicy:
          BucketName: multi-modal-rag-notes-api-apiintegrations
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DocumentTable
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - TranscribeMediaWorkflowSfn
            - Name
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dev/pinecone-secret-GTZ20L
      - Statement:
        - Sid: BedrockScopedAccess
          Effect: Allow
          Action: bedrock:InvokeModel
          Resource:
          - arn:aws:bedrock:*::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0
          - arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v1
      Environment:
        Variables:
          DOCS_TABLE:
            Ref: DocumentTable
          BUCKET: multi-modal-rag-notes-api-apiintegrations
          STATE_MACHINE_ARN:
            Ref: TranscribeMediaWorkflowSfn
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - SQSQueue
              - Arn
            BatchSize: 5
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ApiIntegrationsGenerateEmbeddingsFunction81acc7a7DepLayer
    Metadata:
      SamResourceId: GenerateEmbeddingsFunction
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: multi-modal-rag-notes-api-apiintegrations
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  DocumentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DocumentBucket
      PolicyDocument:
        Id: EnforceHttpsPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: EnforceHttpsSid
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource:
          - Fn::Sub: arn:aws:s3:::${DocumentBucket}/*
          - Fn::Sub: arn:aws:s3:::${DocumentBucket}
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: /Users/rosius/Documents/multi-modal-rag-notes-api/multi-modal-rag-notes-api/.aws-sam/auto-dependency-layer/ApiIntegrations/adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
Outputs:
  NoteLambdaFunction:
    Description: Notes Lambda function Arn
    Value:
      Fn::GetAtt:
      - NoteLambdaFunction
      - Arn
  AppSyncServiceRole:
    Description: AppSync service role
    Value:
      Fn::GetAtt:
      - AppSyncServiceRole
      - Arn
